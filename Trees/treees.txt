// Based on inorder traversal
//https://practice.geeksforgeeks.org/problems/print-bst-elements-in-given-range/1#
  vector<int> ans;
    vector<int> printNearNodes(Node *root, int low, int high) {
        if(root==NULL)
            return ans;
        

        printNearNodes(root->left,low,high);

        if(root->data>=low&&root->data<=high)
        {
            ans.push_back(root->data);
        }
        
        printNearNodes(root->right,low,high);
        
        return ans;
        //code here   
    }

//BT to bst
 Node* insert(Node* root, int Key) {
    Node* node = new Node(Key);
    if(root==NULL)
        return node;
    
    if(Key<root->data)
    {
        if(root->left)
        {
            insert(root->left,Key);
        }
        else
            root->left=node;
    }
    else if(Key>root->data)
    {
        if(root->right)
        {
            insert(root->right,Key);
        }
        else
        {
            root->right=node;
        }
    }
    return root;
    // Your code here
}
    // The given root is the root of the Binary Tree
    // Return the root of the generated BST
    void solve(Node *root,Node* newroot)
    {
        if(root==NULL)
            return;
        newroot = insert(newroot,root->data);
        solve(root->left,newroot);
        solve(root->right,newroot);
        return;
    }
    Node *binaryTreeToBST (Node *node)
    {
    
        if(root==NULL)
            return NULL;
        Node* newroot = NULL;
        solve(root,newroot);
       
        return newroot;
        //Your code goes here
    }

// Leaf at same level
    int height(Node* root)
    {
        if(root==NULL)
            return 0;
        return 1+max(height(root->left),height(root->right));
    }
    
    bool check(Node *root)
    {
        if(root==NULL)
            return true;
        
        if(root->left&&root->right&&height(root->left)!=height(root->right))
        {
            return false;
        }
        return check(root->left)&&check(root->right);
        //Your code here
    }

//
https://practice.geeksforgeeks.org/problems/is-binary-tree-heap/1

     int height(Node* root)
    {
        if(root==NULL)
            return 0;
        return 1+max(height(root->left),height(root->right));
    }
    bool isHeap(struct Node* root) {
        if(root==NULL)
            return true;
        
        if(root->left&&root->right&&height(root->left)!=height(root->right))
        {
            return false;
        }
        if(root->left&&root->right&&(root->data<root->left->data||root->data<root->right->data))
        {
            return false;
        }
        return isHeap(root->left)&&isHeap(root->right);
        // code here
    }

//If BST contains a ded end
// check for leaf x-1 and x+1 are present in bst or not
void solve(Node* root,set<int> &s)
{
    if(root==NULL)
        return;
    
    s.insert(root->data);
    solve(root->left,s);
    solve(root->right,s);
}
bool test(Node* root,set<int> &s)
{
    if(root==NULL)
        return false;
    
    if(root->left==NULL&&root->right==NULL&&root->data==1&&s.find(root->data+1)!=s.end())
        return true;
    else if(root->left==NULL&&root->right==NULL&&s.find(root->data+1)!=s.end()&&s.find(root->data-1)!=s.end())
        return true;
    return test(root->left,s)||test(root->right,s);
}
bool isDeadEnd(Node *root)
{
    set<int> s;
    solve(root,s);
    return test(root,s);
    //Your code here
}

//Longest Consecutive Sequence
https://practice.geeksforgeeks.org/problems/longest-consecutive-sequence-in-binary-tree/1#
    void solve(Node* root,int ok,int test,int &ans)
    {
        if(root==NULL)
            return;
        if(root->data==test)
            ok++;
        else
            ok=1;
        ans = max(ans,ok);
        solve(root->left,ok,root->data+1,ans);
        solve(root->right,ok,root->data+1,ans);
    }
    int longestConsecutive(Node* root)
    {
        if(root==NULL)
            return -1;
        int ans = 0;int x = root->data;
        solve(root,0,x,ans);
        if(ans==1)
            return -1;
        return ans;
         //Code here
    }

//https://practice.geeksforgeeks.org/problems/level-of-a-node-in-binary-tree/1
    void solve(Node* root,int k,int x,int &level)
    {
        if(root==NULL)
            return;
        if(root->data==k)
        {
            level=x;return;
        }
        solve(root->left,k,x+1,level);
        solve(root->right,k,x+1,level);
    }
    int getLevel(struct Node *node, int target)
    {
        if(node==NULL)
            return 0;
        int ans = 0;
        solve(node,target,1,ans);
        
        return ans;
    	//code here
    }


/Ancestors in BST
    void solve(Node* root,int x,bool &flag,vector<int> &vp)
    {
        if(root==NULL)
            return;

        if(root->data==x)
        {
            flag = true;
            return;
        }

        if(flag==false)
            solve(root->left,x,flag,vp);
        if(flag==false)
            solve(root->right,x,flag,vp);
        if(flag)
        {
            vp.push_back(root->data);
        }
    }
    vector<int> Ancestors(struct Node *root, int target)
    {
        vector<int> vp;
        if(root==NULL)
        {
            
            return vp;
        }
        bool flag = false;
        solve(root,target,flag,vp);
        return vp;
         // Code here
    }

//https://practice.geeksforgeeks.org/problems/root-to-leaf-paths/1#
 void solve(Node* root,vector<int> ok,vector<vector<int>> &vp)
 {
     if(root==NULL)
     {
         return;
     }
     
     ok.push_back(root->data);
     if(root->left==NULL&&root->right==NULL)
     {
         
         vp.push_back(ok);
         return;
     }
     solve(root->left,ok,vp);
     
     solve(root->right,ok,vp);
 }
vector<vector<int>> Paths(Node* root)
{
    vector<vector<int>> vp;
    if(root==NULL)
        return vp;
    vector<int> ok;
    solve(root,ok,vp);
    return vp;
    // Code here
}

//Max Min in a binary tree
    int maxe=INT_MIN;
    int findMax(Node *root)
    {
        if(root==NULL)
            return -1;
        maxe=max(maxe,root->data);
        findMax(root->left);
        findMax(root->right);
        return maxe;
        //code here
    }
    int mine=INT_MAX;
    int findMin(Node *root)
    {
        if(root==NULL)
            return -1;
        mine=min(mine,root->data);
        findMin(root->left);
        findMin(root->right);
        return mine;
        //code here
    }

//Check if tree is perfect binary Tree
https://practice.geeksforgeeks.org/problems/perfect-binary-tree/1
    bool isPerfect(Node *root)
    {
        if(root==NULL)
            return true;
        if(root->left==NULL&&root->right!=NULL)
        {
            return false;
        }
        if(root->right==NULL&&root->left!=NULL)
            return false;
        if(height(root->left)!=height(root->right))
            return false;
        return isPerfect(root->left)&&isPerfect(root->right);
        //code here
    }

//https://practice.geeksforgeeks.org/problems/full-binary-tree/1
bool isFullTree (struct Node* root)
{
    if(root==NULL)
        return true;
    
    if(root->left==NULL&&root->right!=NULL)
        return false;
    if(root->left!=NULL&&root->right==NULL)
        return false;
    return isFullTree(root->left)&&isFullTree(root->right);
    
//add code here.
}

//https://practice.geeksforgeeks.org/problems/symmetric-tree/1
    bool solve(Node* r1,Node* r2)
    {
        if(r1==NULL&&r2==NULL)
            return true;
        if(r1==NULL&&r2!=NULL)
            return false;
        if(r1!=NULL&&r2==NULL)
            return false;
        if(r1->data!=r2->data)
            return false;
        return solve(r1->left,r2->right)&&solve(r1->right,r2->left);
    }
    bool isSymmetric(struct Node* root)
    {
        if(root==NULL)
            return true;
        
        return solve(root,root);
	    // Code here
    }

//Next Right Node
https://practice.geeksforgeeks.org/problems/next-right-node/1
vector<vector<int>> levelOrder(Node *root)
{
    vector<vector<int>> vp;
    if (root == NULL)
        return vp;

    queue<Node *> q;
    q.push(root);
    while (!q.empty())
    {
        vector<int> t;
        int sz = q.size();
        for (int i = 0; i < sz; i++)
        {
            Node *temp = q.front();
            // cout<<temp->val<<" ";
            q.pop();
            if (temp->left != NULL)
            {
                q.push(temp->left);
            }
            if (temp->right != NULL)
            {
                q.push(temp->right);
            }
            t.push_back(temp->data);
        }
        // cout << endl;
        vp.push_back(t);
    }
    return vp;
}
    Node *nextRight(Node *root, int key)
    {
        
        if(root==NULL)
            return new Node(-1);
        vector<vector<int>> vp = levelOrder(root);
        for(auto &value:vp)
        {
            for(int i=0;i<value.size();i++)
            {
                if(i+1<value.size()&&value[i]==key)
                {
                    return new Node(value[i+1]);
                }
            }
        }
        return new Node(-1);
        //code here
    }

Depth of a node
https://practice.geeksforgeeks.org/problems/depth-of-node/1#
    void solve(Node* root,int &ans,int cnt)
    {
        if(root==NULL)
            return;
        
        if(cnt%2==1&&root->left==NULL&&root->right==NULL)
        {
            ans=max(ans,cnt);
        }
        solve(root->left,ans,cnt+1);
        solve(root->right,ans,cnt+1);
    }
    int depthOfOddLeaf(Node *root)
    {
        if(root==NULL)
            return 0;
        int ans = 0;
        solve(root,ans,1);
        return ans;
        //code here
    }

//Predecesor and succesor
void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
{
    vp.clear();
    inorder(root);
    if(root==NULL)
    {
        pre=new Node(-1);
        suc=new Node(-1);return;
    }
    pre = new Node(-1);
    suc = new Node(-1);
    for(int i=0;i<vp.size();i++)
    {
        if(vp[i]<key)
        {
            pre->key = vp[i];
        }
        else
            break;
    }
    for(int i=vp.size()-1;i>=0;i--)
    {
        if(vp[i]>key)
        {
            suc->key = vp[i];
        }
        else
            break;
    }
    
// Your code goes here

}

//Verttical sum
//https://practice.geeksforgeeks.org/problems/vertical-sum/1
    void solve(Node* root,map<int,int> &mp,int cnt)
    {
        if(root==NULL)
            return;
        
        mp[cnt]+=root->data;
        solve(root->left,mp,cnt-1);
        solve(root->right,mp,cnt+1);
    }
    vector <int> verticalSum(Node *root) {
        map<int,int> mp;int cnt =1;
        solve(root,mp,cnt);
        vector<int> ans;
        for(auto &value:mp)
            ans.push_back(value.second);
        return ans;
        // add code here.
    }