// Based on inorder traversal
//https://practice.geeksforgeeks.org/problems/print-bst-elements-in-given-range/1#
  vector<int> ans;
    vector<int> printNearNodes(Node *root, int low, int high) {
        if(root==NULL)
            return ans;
        

        printNearNodes(root->left,low,high);

        if(root->data>=low&&root->data<=high)
        {
            ans.push_back(root->data);
        }
        
        printNearNodes(root->right,low,high);
        
        return ans;
        //code here   
    }

//BT to bst
 Node* insert(Node* root, int Key) {
    Node* node = new Node(Key);
    if(root==NULL)
        return node;
    
    if(Key<root->data)
    {
        if(root->left)
        {
            insert(root->left,Key);
        }
        else
            root->left=node;
    }
    else if(Key>root->data)
    {
        if(root->right)
        {
            insert(root->right,Key);
        }
        else
        {
            root->right=node;
        }
    }
    return root;
    // Your code here
}
    // The given root is the root of the Binary Tree
    // Return the root of the generated BST
    void solve(Node *root,Node* newroot)
    {
        if(root==NULL)
            return;
        newroot = insert(newroot,root->data);
        solve(root->left,newroot);
        solve(root->right,newroot);
        return;
    }
    Node *binaryTreeToBST (Node *node)
    {
    
        if(root==NULL)
            return NULL;
        Node* newroot = NULL;
        solve(root,newroot);
       
        return newroot;
        //Your code goes here
    }

// Leaf at same level
    int height(Node* root)
    {
        if(root==NULL)
            return 0;
        return 1+max(height(root->left),height(root->right));
    }
    
    bool check(Node *root)
    {
        if(root==NULL)
            return true;
        
        if(root->left&&root->right&&height(root->left)!=height(root->right))
        {
            return false;
        }
        return check(root->left)&&check(root->right);
        //Your code here
    }

//
https://practice.geeksforgeeks.org/problems/is-binary-tree-heap/1

     int height(Node* root)
    {
        if(root==NULL)
            return 0;
        return 1+max(height(root->left),height(root->right));
    }
    bool isHeap(struct Node* root) {
        if(root==NULL)
            return true;
        
        if(root->left&&root->right&&height(root->left)!=height(root->right))
        {
            return false;
        }
        if(root->left&&root->right&&(root->data<root->left->data||root->data<root->right->data))
        {
            return false;
        }
        return isHeap(root->left)&&isHeap(root->right);
        // code here
    }

//If BST contains a ded end
// check for leaf x-1 and x+1 are present in bst or not
void solve(Node* root,set<int> &s)
{
    if(root==NULL)
        return;
    
    s.insert(root->data);
    solve(root->left,s);
    solve(root->right,s);
}
bool test(Node* root,set<int> &s)
{
    if(root==NULL)
        return false;
    
    if(root->left==NULL&&root->right==NULL&&root->data==1&&s.find(root->data+1)!=s.end())
        return true;
    else if(root->left==NULL&&root->right==NULL&&s.find(root->data+1)!=s.end()&&s.find(root->data-1)!=s.end())
        return true;
    return test(root->left,s)||test(root->right,s);
}
bool isDeadEnd(Node *root)
{
    set<int> s;
    solve(root,s);
    return test(root,s);
    //Your code here
}

//Longest Consecutive Sequence
https://practice.geeksforgeeks.org/problems/longest-consecutive-sequence-in-binary-tree/1#
    void solve(Node* root,int ok,int test,int &ans)
    {
        if(root==NULL)
            return;
        if(root->data==test)
            ok++;
        else
            ok=1;
        ans = max(ans,ok);
        solve(root->left,ok,root->data+1,ans);
        solve(root->right,ok,root->data+1,ans);
    }
    int longestConsecutive(Node* root)
    {
        if(root==NULL)
            return -1;
        int ans = 0;int x = root->data;
        solve(root,0,x,ans);
        if(ans==1)
            return -1;
        return ans;
         //Code here
    }

//https://practice.geeksforgeeks.org/problems/level-of-a-node-in-binary-tree/1
    void solve(Node* root,int k,int x,int &level)
    {
        if(root==NULL)
            return;
        if(root->data==k)
        {
            level=x;return;
        }
        solve(root->left,k,x+1,level);
        solve(root->right,k,x+1,level);
    }
    int getLevel(struct Node *node, int target)
    {
        if(node==NULL)
            return 0;
        int ans = 0;
        solve(node,target,1,ans);
        
        return ans;
    	//code here
    }


/Ancestors in BST
    void solve(Node* root,int x,bool &flag,vector<int> &vp)
    {
        if(root==NULL)
            return;

        if(root->data==x)
        {
            flag = true;
            return;
        }

        if(flag==false)
            solve(root->left,x,flag,vp);
        if(flag==false)
            solve(root->right,x,flag,vp);
        if(flag)
        {
            vp.push_back(root->data);
        }
    }
    vector<int> Ancestors(struct Node *root, int target)
    {
        vector<int> vp;
        if(root==NULL)
        {
            
            return vp;
        }
        bool flag = false;
        solve(root,target,flag,vp);
        return vp;
         // Code here
    }

//https://practice.geeksforgeeks.org/problems/root-to-leaf-paths/1#
 void solve(Node* root,vector<int> ok,vector<vector<int>> &vp)
 {
     if(root==NULL)
     {
         return;
     }
     
     ok.push_back(root->data);
     if(root->left==NULL&&root->right==NULL)
     {
         
         vp.push_back(ok);
         return;
     }
     solve(root->left,ok,vp);
     
     solve(root->right,ok,vp);
 }
vector<vector<int>> Paths(Node* root)
{
    vector<vector<int>> vp;
    if(root==NULL)
        return vp;
    vector<int> ok;
    solve(root,ok,vp);
    return vp;
    // Code here
}

//Max Min in a binary tree
    int maxe=INT_MIN;
    int findMax(Node *root)
    {
        if(root==NULL)
            return -1;
        maxe=max(maxe,root->data);
        findMax(root->left);
        findMax(root->right);
        return maxe;
        //code here
    }
    int mine=INT_MAX;
    int findMin(Node *root)
    {
        if(root==NULL)
            return -1;
        mine=min(mine,root->data);
        findMin(root->left);
        findMin(root->right);
        return mine;
        //code here
    }

//Check if tree is perfect binary Tree
https://practice.geeksforgeeks.org/problems/perfect-binary-tree/1
    bool isPerfect(Node *root)
    {
        if(root==NULL)
            return true;
        if(root->left==NULL&&root->right!=NULL)
        {
            return false;
        }
        if(root->right==NULL&&root->left!=NULL)
            return false;
        if(height(root->left)!=height(root->right))
            return false;
        return isPerfect(root->left)&&isPerfect(root->right);
        //code here
    }

//https://practice.geeksforgeeks.org/problems/full-binary-tree/1
bool isFullTree (struct Node* root)
{
    if(root==NULL)
        return true;
    
    if(root->left==NULL&&root->right!=NULL)
        return false;
    if(root->left!=NULL&&root->right==NULL)
        return false;
    return isFullTree(root->left)&&isFullTree(root->right);
    
//add code here.
}

//https://practice.geeksforgeeks.org/problems/symmetric-tree/1
    bool solve(Node* r1,Node* r2)
    {
        if(r1==NULL&&r2==NULL)
            return true;
        if(r1==NULL&&r2!=NULL)
            return false;
        if(r1!=NULL&&r2==NULL)
            return false;
        if(r1->data!=r2->data)
            return false;
        return solve(r1->left,r2->right)&&solve(r1->right,r2->left);
    }
    bool isSymmetric(struct Node* root)
    {
        if(root==NULL)
            return true;
        
        return solve(root,root);
	    // Code here
    }

//Next Right Node
https://practice.geeksforgeeks.org/problems/next-right-node/1
vector<vector<int>> levelOrder(Node *root)
{
    vector<vector<int>> vp;
    if (root == NULL)
        return vp;

    queue<Node *> q;
    q.push(root);
    while (!q.empty())
    {
        vector<int> t;
        int sz = q.size();
        for (int i = 0; i < sz; i++)
        {
            Node *temp = q.front();
            // cout<<temp->val<<" ";
            q.pop();
            if (temp->left != NULL)
            {
                q.push(temp->left);
            }
            if (temp->right != NULL)
            {
                q.push(temp->right);
            }
            t.push_back(temp->data);
        }
        // cout << endl;
        vp.push_back(t);
    }
    return vp;
}
    Node *nextRight(Node *root, int key)
    {
        
        if(root==NULL)
            return new Node(-1);
        vector<vector<int>> vp = levelOrder(root);
        for(auto &value:vp)
        {
            for(int i=0;i<value.size();i++)
            {
                if(i+1<value.size()&&value[i]==key)
                {
                    return new Node(value[i+1]);
                }
            }
        }
        return new Node(-1);
        //code here
    }

Depth of a node
https://practice.geeksforgeeks.org/problems/depth-of-node/1#
    void solve(Node* root,int &ans,int cnt)
    {
        if(root==NULL)
            return;
        
        if(cnt%2==1&&root->left==NULL&&root->right==NULL)
        {
            ans=max(ans,cnt);
        }
        solve(root->left,ans,cnt+1);
        solve(root->right,ans,cnt+1);
    }
    int depthOfOddLeaf(Node *root)
    {
        if(root==NULL)
            return 0;
        int ans = 0;
        solve(root,ans,1);
        return ans;
        //code here
    }

//Predecesor and succesor
void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
{
    vp.clear();
    inorder(root);
    if(root==NULL)
    {
        pre=new Node(-1);
        suc=new Node(-1);return;
    }
    pre = new Node(-1);
    suc = new Node(-1);
    for(int i=0;i<vp.size();i++)
    {
        if(vp[i]<key)
        {
            pre->key = vp[i];
        }
        else
            break;
    }
    for(int i=vp.size()-1;i>=0;i--)
    {
        if(vp[i]>key)
        {
            suc->key = vp[i];
        }
        else
            break;
    }
    
// Your code goes here

}

//Verttical sum
//https://practice.geeksforgeeks.org/problems/vertical-sum/1
    void solve(Node* root,map<int,int> &mp,int cnt)
    {
        if(root==NULL)
            return;
        
        mp[cnt]+=root->data;
        solve(root->left,mp,cnt-1);
        solve(root->right,mp,cnt+1);
    }
    vector <int> verticalSum(Node *root) {
        map<int,int> mp;int cnt =1;
        solve(root,mp,cnt);
        vector<int> ans;
        for(auto &value:mp)
            ans.push_back(value.second);
        return ans;
        // add code here.
    }

//https://practice.geeksforgeeks.org/problems/children-sum-parent/1#
    int isSumProperty(Node *root)
    {
        if(root==NULL)
        {
            return true;
        }
        if(root->left==NULL&&root->right==NULL)
            return true;
        if(root->left&&root->right&&root->data!=(root->left->data+root->right->data))
        {
            return false;
        }
        else if(root->left&&root->right==NULL&&root->data!=(root->left->data+0))
        {
            return false;
        }
        else if(root->right&&root->left==NULL&&root->data!=(0+root->right->data))
        {
            return false;
        }
        return isSumProperty(root->left)&&isSumProperty(root->right);
     // Add your code here
    }

//Vertical Width of Binary tree
void solve(Node* root,map<int,int> &mp,int cnt)
{
    if(root==NULL)
        return;
    mp[cnt]+=root->data;
    solve(root->left,mp,cnt-1);
    solve(root->right,mp,cnt+1);
    return;
    
}
int verticalWidth(Node* root)
{
    if(root==NULL)
        return 0;
    map<int,int> mp;
    solve(root,mp,0);
    return mp.size();
    // Code here
}
//https://practice.geeksforgeeks.org/problems/tilt-of-binary-tree/1#
    // function should return the tilt of the tree
    void sum(Node* root,int &s)
    {
        if(root==NULL)
            return;
        s+=root->data;
        sum(root->left,s);
        sum(root->right,s);
    }
    void solve(Node* root,int &ans)
    {
        if(root==NULL)
            return;
        
        int left = 0;
        int right = 0;
        sum(root->left,left);
        sum(root->right,right);
        ans+=abs(left-right);
        solve(root->left,ans);
        solve(root->right,ans);
    }
    
    int tiltTree(Node *root)
    {
        if(root==NULL)
            return 0;
        int ans = 0;
        solve(root,ans);
        return ans;
        //code here
    }

//change key in BST
https://practice.geeksforgeeks.org/problems/implement-change-key-in-bst/1#
node* insert(node* root, int Key) {
    // node* node = new node(Key);
    node* noe = new node(Key);
    if(root==NULL)
        return noe;
    
    if(Key<root->key)
    {
        if(root->left)
        {
            insert(root->left,Key);
        }
        else
            root->left=noe;
    }
    else if(Key>=root->key)
    {
        if(root->right)
        {
            insert(root->right,Key);
        }
        else
        {
            root->right=noe;
        }
    }
    return root;
    // Your code here
}
node *deleteNode(node *root, int X) {
    if(root==NULL)
        return NULL;
    
    if(root->key==X)
    {
        if(root->left==NULL&&root->right==NULL)
            return NULL;
        else if(root->left==NULL)
        {
            return root->right;
        }
        else if(root->right==NULL)
        {
            return root->left;
        }
       node* temp = root->right;
        while(temp&&temp->left)
        {
            temp=temp->left;
        }
        root->key=temp->key;
        root->right = deleteNode(root->right,temp->key);
        return root;
    }
    else if(root->key<X)
        root->right=deleteNode(root->right,X);
    root->left=deleteNode(root->left,X);
    return root;
    // your code goes here
}
struct node *changeKey(struct node *node, int oldVal, int newVal)
{
    
    if(node==NULL)
        return NULL;
    
    node = deleteNode(node,oldVal);
    node = insert(node,newVal);
    return node;
    
	// Code here
}

//MEdian in BST
vector<int> vp;
void inorder(struct Node *root)
{
    if (!root)
        return;

    inorder(root->left);
    // cout << root->data << " ";
    vp.push_back(root->data);
    inorder(root->right);
}
float findMedian(struct Node *root)
{
    vp.clear();
    inorder(root);
    if(vp.size()%2==0)
    {
        return (float)(vp[vp.size()/2]+vp[(vp.size()/2)-1])/2.0;
    }
    return (float)vp[vp.size()/2];
      //Code here
}

//another appaoch
int val=0;
int fetchTheElement(Node *root,int num,int &i)
{
     if(!root)
     return 0;
     
     fetchTheElement(root->left,num,i);
     
     i++;
     if(i == num)
     val = root->data;
     
     fetchTheElement(root->right,num,i);
}

int count(Node *root)
{
    if(!root)    
    return 0;
    
    return 1 + count(root->left) + count(root->right);
}

float findMedian(struct Node *root)
{
      //Code here
      int i = 0;
      int N = count(root);
      
      if(N%2 == 0)
      {
          fetchTheElement(root,N/2,i);
          int a = val;
          i=0;
          fetchTheElement(root,N/2 + 1,i);
          int b = val;
          
          return (a + b)/2.0;
      }
      else
      {
          fetchTheElement(root,(N + 1)/2,i);
          int a = val;
          
          
          return a;
      }
}

//Normal BST to balanced BST
//find the inorder array and then take mid element to make a balanced tree
https://practice.geeksforgeeks.org/problems/normal-bst-to-balanced-bst/1
vector<int> vp;
void inorder(Node* root)
{
    if(root==NULL)
        return;
    inorder(root->left);
    vp.push_back(root->data);
    inorder(root->right);
    return;
}
Node* balanced(int s,int e,vector<int> arr)
{
    if(s>e)
        return NULL;
    int mid = s+(e-s)/2;
    Node* root = new Node(arr[mid]);
    root->left=balanced(s,mid-1,arr);
    root->right=balanced(mid+1,e,arr);
    return root;
}
Node* buildBalancedTree(Node* root)
{
    vp.clear();
    inorder(root);
    return balanced(0,vp.size()-1,vp);
	// Code here
}

//leaf under budget
https://practice.geeksforgeeks.org/problems/leaf-under-budget/1#
void solve(Node* root,int cnt,vector<int> &vp)
{
    if(root==NULL)
        return;
    if(root->left==NULL&&root->right==NULL)
    {
        vp.push_back(cnt);
        return;
    }
    solve(root->left,cnt+1,vp);
    solve(root->right,cnt+1,vp);
}
    int getCount(Node *root, int k)
    {
        vector<int> vp;
        solve(root,1,vp);
        sort(vp.begin(),vp.end());
        int ans = 0;int sum=0;
        for(auto &value:vp)
        {
            if(sum+value<=k)
            {
                ans++;
                sum+=value;
            }
        }
        return ans;
        //code here
    }

//https://practice.geeksforgeeks.org/problems/sum-of-left-leaf-nodes/1#
void solve(Node* root,int &sum)
{
    if(root==NULL)
        return;
    if(root->left&&root->left->left==NULL&&root->left->right==NULL)
    {
        sum+=root->left->data;
    }
    solve(root->left,sum);
    solve(root->right,sum);
    
    
}
int leftLeavesSum(Node *root)
{
    if(root==NULL)
        return 0;
    
    int sum = 0;
    solve(root,sum);
    return sum;
    // Code here
}

//Nodes at odd level
//https://practice.geeksforgeeks.org/problems/nodes-at-odd-levels/1
vector<vector<int>> levelOrder(Node *root)
{
    vector<vector<int>> vp;
    if (root == NULL)
        return vp;

    queue<Node *> q;
    q.push(root);
    while (!q.empty())
    {
        vector<int> t;
        int sz = q.size();
        for (int i = 0; i < sz; i++)
        {
            Node *temp = q.front();
            // cout<<temp->val<<" ";
            q.pop();
            if (temp->left != NULL)
            {
                q.push(temp->left);
            }
            if (temp->right != NULL)
            {
                q.push(temp->right);
            }
            t.push_back(temp->data);
        }
        // cout << endl;
        vp.push_back(t);
    }
    return vp;
}
    vector<Node *> nodesAtOddLevels(Node *root)
    {
        vector<Node*> vp;
        if(root==NULL)
            return vp;
        vector<vector<int>> ok = levelOrder(root);
        for(int i=0;i<ok.size();i++)
        {
            if(i%2==0)
            {
                for(auto &value:ok[i])
                {
                    vp.push_back(new Node(value));
                }
            }
        }
        return vp;
        //code here
    }

//Deletion in Binary tree
//https://practice.geeksforgeeks.org/problems/deletion-in-a-binary-tree/1
//vector<vector<int>> levelOrder(Node *root)
{
    vector<vector<int>> vp;
    if (root == NULL)
        return vp;

    queue<Node *> q;
    q.push(root);
    while (!q.empty())
    {
        vector<int> t;
        int sz = q.size();
        for (int i = 0; i < sz; i++)
        {
            Node *temp = q.front();
            // cout<<temp->val<<" ";
            q.pop();
            if (temp->left != NULL)
            {
                q.push(temp->left);
            }
            if (temp->right != NULL)
            {
                q.push(temp->right);
            }
            t.push_back(temp->data);
        }
        // cout << endl;
        vp.push_back(t);
    }
    return vp;
}
Node* deleteNode(Node* root,int repl)
{
    if(root==NULL)
        return NULL;
    if(root->data==repl)
    {
        return NULL;
    }
    root->left = deleteNode(root->left,repl);
    root->right = deleteNode(root->right,repl);
    return root;
}
void solve(Node* root,int key,int repl)
{
    if(root==NULL)
        return;
    if(root->data==key)
    {
        root->data=repl;
        return;
    }
    solve(root->left,key,repl);
    solve(root->right,key,repl);
}
struct Node* deletionBT(struct Node* root, int key)
{
    if(root==NULL)
        return NULL;
    vector<vector<int>> ok =  levelOrder(root);
    int repl = ok[ok.size()-1][ok[ok.size()-1].size()-1];
    root = deleteNode(root,repl);
    solve(root,key,repl);
    return root;
    // code here
}

/https://practice.geeksforgeeks.org/problems/closest-neighbor-in-bst/1
Closest Neighbor in BST
void  solve(Node* root,int &ans,int N)
{
    if(root==NULL)
        return;
    if(root->key<=N)
    {
        ans=max(ans,root->key);
    }
    solve(root->left,ans,N);
    solve(root->right,ans,N);
}
int findMaxForN(Node* root, int N)
{
    if(root==NULL)
    {
        return -1;
    }
    int ans = INT_MIN;
    solve(root,ans,N);
    return ans;
}

//Two sum in BT
//https://practice.geeksforgeeks.org/problems/brothers-from-different-root/1
void solve(Node* root,unordered_map<int,int> &mp)
{
    if(root==NULL)
        return;
    mp[root->data]++;
    solve(root->left,mp);
    solve(root->right,mp);
}
void solve2(Node* root,unordered_map<int,int> &mp,int &ans,int x)
{
    if(root==NULL)
        return;
    if(mp.find(x-root->data)!=mp.end())
        ans+=mp[x-root->data];
    solve2(root->left,mp,ans,x);
    solve2(root->right,mp,ans,x);
}
    int countPairs(Node* root1, Node* root2, int x)
    {
        if(root1==NULL||root2==NULL)
            return 0;
        int ans = 0;
        unordered_map<int,int> mp;
        solve(root2,mp);
        solve2(root1,mp,ans,x);
        return ans;
    }

//Longest Path sum
https://practice.geeksforgeeks.org/problems/sum-of-the-longest-bloodline-of-a-tree/1
    int height(Node* root)
    {
        if(root==NULL)
            return 0;
        return 1+max(height(root->left),height(root->right));
    }
    void solve(Node* root,int h,int cnt,int sum,int &ans)
    {
        if(root==NULL)
            return;
        if(cnt==h)
        {
            sum+=root->data;
            ans=max(ans,sum);
            return;
        }
        
        
        solve(root->left,h,cnt+1,sum+root->data,ans);
        solve(root->right,h,cnt+1,sum+root->data,ans);
    }
    int sumOfLongRootToLeafPath(Node *root)
    {
        if(root==NULL)
            return 0;
        int ans = 0;
        int h = height(root);
        
        solve(root,h,1,0,ans);
        return ans;
        //code here
    }

    //https://practice.geeksforgeeks.org/problems/exchange-the-leaf-nodes/1#
        void leafNodes(Node* root,vector<int> &vp)
    {
        if(root==NULL)
            return;
        
        if(root->left==NULL&&root->right==NULL)
        {
            vp.push_back(root->data);
            return;
        }
        leafNodes(root->left,vp);
        leafNodes(root->right,vp);
    }
    void solve(Node* root,int &idx,vector<int> leaf)
    {
        if(root==NULL)
            return;
        if(root->left==NULL&&root->right==NULL)
        {
            if(idx<leaf.size())
                root->data=leaf[idx];
            idx++;
        }
        solve(root->left,idx,leaf);
        solve(root->right,idx,leaf);
    }
    void pairwiseSwap(Node *root)
    {
        if(root==NULL)
            return;
        vector<int> leaf;
        leafNodes(root,leaf);
        for(int i=0;i<leaf.size();i+=2)
        {
            // cout<<leaf[i]<<" ";
            if(i+1<leaf.size())
            {
                swap(leaf[i],leaf[i+1]);
            }
        }
        // cout<<endl;
        int idx=0;
        solve(root,idx,leaf);
        // code here
    }

//https://practice.geeksforgeeks.org/problems/check-if-two-nodes-are-cousins/1
void solve(Node* root,int a,int ok,int &p,int &l)
{
    if(root==NULL)
    {
        return;
    }
    if(root->left&&root->left->data==a)
    {
        p=root->data;
        l=ok+1;return;
    }
    else if(root->right&&root->right->data==a)
    {
        p=root->data;
        l=ok+1;return;
    }
    solve(root->left,a,ok+1,p,l);
    solve(root->right,a,ok+1,p,l);
}
bool isCousins(Node *root, int a, int b)
{
    if(root==NULL)
        return 0;
    int l1=0,l2=0;
    int p1=0,p2=0;
    solve(root,a,0,p1,l1);
    solve(root,b,0,p2,l2);
    if(l1==l2&&p1!=p2)
        return true;
    return false;
   //add code here.
}
//https://practice.geeksforgeeks.org/problems/inorder-traversal-and-bst5855/1#
    int isRepresentingBST(int arr[], int N)
    {
        for(int i=0;i<N-1;i++)
        {
            if(arr[i]>=arr[i+1])
                return 0;
        }
        return 1;
        // code here
    }

//Largets at every level//  
https://practice.geeksforgeeks.org/problems/largest-value-in-each-level/1  
vector<int> largestValues(Node* root)
    {
        vector<int> ans;
        vector<vector<int>> ok = levelOrder(root);
        for(auto &value:ok)
        {
            ans.push_back(*max_element(value.begin(),value.end()));
        }
        return ans;
        //code here
    }

//Array to BST
https://practice.geeksforgeeks.org/problems/array-to-bst4443/1#
Node* balanced(int s,int e,vector<int> arr)
{
    if(s>e)
        return NULL;
    int mid = s+(e-s)/2;
    Node* root = new Node(arr[mid]);
    root->left=balanced(s,mid-1,arr);
    root->right=balanced(mid+1,e,arr);
    return root;
}
vector<int> vp;
void preorder(Node *root)
{
    if (!root)
        return;
    // cout << root->data << " ";
    vp.push_back(root->data);
    preorder(root->left);
    preorder(root->right);
}
    vector<int> sortedArrayToBST(vector<int>& nums) {
        
        Node* root = balanced(0,nums.size()-1,nums);
        preorder(root);
        return vp;
        // Code here
    }


//https://practice.geeksforgeeks.org/problems/sum-of-k-smallest-elements-in-bst3029/1#
vector<int> vp;
void inorder(struct Node *root)
{
    if (!root)
        return;

    inorder(root->left);
    // cout << root->data << " ";
    vp.push_back(root->data);
    inorder(root->right);
}
int sum(Node* root, int k) 
{ 
    if(root==NULL)
        return -1;
    vp.clear();
    inorder(root);
    if(k>*max_element(vp.begin(),vp.end()))
        return -1;
    // for(auto &value:vp)
    //     cout<<value<<" ";
    // cout<<endl;
    int sum = 0;
    for(int i=0;i<=k-1;i++)
    {
        sum+=vp[i];
    }
    return sum;
    // Your code here
    
    
} 