// Based on inorder traversal
//https://practice.geeksforgeeks.org/problems/print-bst-elements-in-given-range/1#
  vector<int> ans;
    vector<int> printNearNodes(Node *root, int low, int high) {
        if(root==NULL)
            return ans;
        

        printNearNodes(root->left,low,high);

        if(root->data>=low&&root->data<=high)
        {
            ans.push_back(root->data);
        }
        
        printNearNodes(root->right,low,high);
        
        return ans;
        //code here   
    }

//BT to bst
 Node* insert(Node* root, int Key) {
    Node* node = new Node(Key);
    if(root==NULL)
        return node;
    
    if(Key<root->data)
    {
        if(root->left)
        {
            insert(root->left,Key);
        }
        else
            root->left=node;
    }
    else if(Key>root->data)
    {
        if(root->right)
        {
            insert(root->right,Key);
        }
        else
        {
            root->right=node;
        }
    }
    return root;
    // Your code here
}
    // The given root is the root of the Binary Tree
    // Return the root of the generated BST
    void solve(Node *root,Node* newroot)
    {
        if(root==NULL)
            return;
        newroot = insert(newroot,root->data);
        solve(root->left,newroot);
        solve(root->right,newroot);
        return;
    }
    Node *binaryTreeToBST (Node *node)
    {
    
        if(root==NULL)
            return NULL;
        Node* newroot = NULL;
        solve(root,newroot);
       
        return newroot;
        //Your code goes here
    }

// Leaf at same level
    int height(Node* root)
    {
        if(root==NULL)
            return 0;
        return 1+max(height(root->left),height(root->right));
    }
    
    bool check(Node *root)
    {
        if(root==NULL)
            return true;
        
        if(root->left&&root->right&&height(root->left)!=height(root->right))
        {
            return false;
        }
        return check(root->left)&&check(root->right);
        //Your code here
    }

//
https://practice.geeksforgeeks.org/problems/is-binary-tree-heap/1

     int height(Node* root)
    {
        if(root==NULL)
            return 0;
        return 1+max(height(root->left),height(root->right));
    }
    bool isHeap(struct Node* root) {
        if(root==NULL)
            return true;
        
        if(root->left&&root->right&&height(root->left)!=height(root->right))
        {
            return false;
        }
        if(root->left&&root->right&&(root->data<root->left->data||root->data<root->right->data))
        {
            return false;
        }
        return isHeap(root->left)&&isHeap(root->right);
        // code here
    }

//If BST contains a ded end
// check for leaf x-1 and x+1 are present in bst or not
void solve(Node* root,set<int> &s)
{
    if(root==NULL)
        return;
    
    s.insert(root->data);
    solve(root->left,s);
    solve(root->right,s);
}
bool test(Node* root,set<int> &s)
{
    if(root==NULL)
        return false;
    
    if(root->left==NULL&&root->right==NULL&&root->data==1&&s.find(root->data+1)!=s.end())
        return true;
    else if(root->left==NULL&&root->right==NULL&&s.find(root->data+1)!=s.end()&&s.find(root->data-1)!=s.end())
        return true;
    return test(root->left,s)||test(root->right,s);
}
bool isDeadEnd(Node *root)
{
    set<int> s;
    solve(root,s);
    return test(root,s);
    //Your code here
}

//Longest Consecutive Sequence
https://practice.geeksforgeeks.org/problems/longest-consecutive-sequence-in-binary-tree/1#
    void solve(Node* root,int ok,int test,int &ans)
    {
        if(root==NULL)
            return;
        if(root->data==test)
            ok++;
        else
            ok=1;
        ans = max(ans,ok);
        solve(root->left,ok,root->data+1,ans);
        solve(root->right,ok,root->data+1,ans);
    }
    int longestConsecutive(Node* root)
    {
        if(root==NULL)
            return -1;
        int ans = 0;int x = root->data;
        solve(root,0,x,ans);
        if(ans==1)
            return -1;
        return ans;
         //Code here
    }