//https://practice.geeksforgeeks.org/problems/sum-of-k-smallest-elements-in-bst3029/1#
//Function to count number of nodes in BST that lie in the given range.
void solve(Node* root,int &cnt,int l,int h)
{
    if(root==NULL)
        return;
    if(root->data>=l&&root->data<=h)
    {
        cnt+=1;
    }
    solve(root->left,cnt,l,h);
    solve(root->right,cnt,l,h);
}
int getCount(Node *root, int l, int h)
{
    if(root==NULL)
        return 0;
    int cnt = 0;
    solve(root,cnt,l,h);
    return cnt;
  // your code goes here   
}


//https://practice.geeksforgeeks.org/problems/add-all-greater-values-to-every-node-in-a-bst/1
void solve(Node* root,int &sum)
{
    if(root==NULL)
        return;
    solve(root->right,sum);
    sum+=root->data;
    root->data=sum;
    solve(root->left,sum);
}
Node* modify(Node *root)
{
    if(root==NULL)
        return NULL;
    int sum = 0;
    solve(root,sum);
    return root;
    // Your code here
}

//https://practice.geeksforgeeks.org/problems/tree-from-postorder-and-inorder/1
Node* solve(int in[],int post[],int s,int e,int &i,unordered_map<int,int> &mp)
{
    if(s>e)
        return NULL;
        
    int curr = post[i];
    i--;
    Node* node = new Node(curr);
    if(s==e)
    {
        return node;
    }
    int idx = mp[curr];
    node->right = solve(in,post,idx+1,e,i,mp);
    node->left = solve(in,post,s,idx-1,i,mp);
    return node;
}
Node *buildTree(int in[], int post[], int n) {
    unordered_map<int,int> mp;
    for(int i=0;i<n;i++)
    {
        mp[in[i]]=i;
    }
    int i=n-1;
    return solve(in,post,0,n-1,i,mp);
    // Your code here
}

//Sum tree
https://practice.geeksforgeeks.org/problems/sum-tree/1
    int sum(Node* root)
    {
        if(root==NULL)
            return 0;
        return root->data+sum(root->left)+sum(root->right);
    }
    void solve(Node* root,bool &res)
    {
        if(root==NULL)
            return;
        if(root->left==NULL&&root->right==NULL)
            return;
        int lt = sum(root->left);
        int lr = sum(root->right);
        if(lt+lr!=root->data)
        {
            res=false;return;
        }
        solve(root->left,res);
        solve(root->right,res);
    }
    bool isSumTree(Node* root)
    {
        if(root==NULL)
            return true;
        bool res = true;
        solve(root,res);
        return res;
         // Your code here
    }


//https://practice.geeksforgeeks.org/problems/connect-nodes-at-same-level/1
vector<vector<Node*>> levelOrder(Node *root)
{
    vector<vector<Node*>> vp;
    if (root == NULL)
        return vp;

    queue<Node *> q;
    q.push(root);
    while (!q.empty())
    {
        vector<Node*> t;
        int sz = q.size();
        for (int i = 0; i < sz; i++)
        {
            Node *temp = q.front();
            // cout<<temp->val<<" ";
            q.pop();
            if (temp->left != NULL)
            {
                q.push(temp->left);
            }
            if (temp->right != NULL)
            {
                q.push(temp->right);
            }
            t.push_back(temp);
        }
       
        vp.push_back(t);
    }
    return vp;
}
    void connect(Node *root)
    {
        vector<vector<Node*>> vp = levelOrder(root);
        for(auto &value:vp)
        {
            for(int i=0;i<value.size()-1;i++)
            {
                value[i]->nextRight=value[i+1];
            }
            value[value.size()-1]->nextRight=NULL;
        }
        
       // Your Code Here
    } 

//https://practice.geeksforgeeks.org/problems/lowest-common-ancestor-in-a-binary-tree/1#
    void solve(Node* root,bool &flag,vector<int> &vp,int x)
    {
        if(root==NULL)
            return;

        if(root->data==x)
        {
            flag = true;
        }
        
        if(!flag)
        {
            solve(root->left,flag,vp,x);
        }
        if(!flag)
        {
            solve(root->right,flag,vp,x);
        }
        if(flag)
        {
            vp.push_back(root->data);
        }
        
    }
    Node* lca(Node* root ,int n1 ,int n2 )
    {
        if(root==NULL)
            return NULL;
        vector<int> p1;
        bool flag = false;
        solve(root,flag,p1,n1);
        flag = false;
        vector<int> p2;
        solve(root,flag,p2,n2);
        if(p1.size()==0&&p2.size()==0)
        {
            return new Node(-1);
        }
        // for(auto &value:p1)
        //     cout<<value<<" ";
        // cout<<endl;
        // for(auto &value:p2)
        //     cout<<value<<" ";
        // cout<<endl;
        int ans = -1;
        unordered_set<int> s;
        for(auto &value:p1)
            s.insert(value);
        for(auto &value:p2)
        {
            if(s.find(value)!=s.end())
            {
                ans=value;break;
            }
        }
        return new Node(ans);
       //Your code here 
    }

//https://practice.geeksforgeeks.org/problems/maximum-difference-between-node-and-its-ancestor/1#
int solve(Node* root,int &ans)
{
    if(root==NULL)
        return INT_MAX;
    
    if(root->left==NULL&&root->right==NULL)
        return root->data;
    int l = solve(root->left,ans);
    int r = solve(root->right,ans);
    int ok = min(l,r);
    ans=max(ans,root->data-ok);
    return min(root->data,ok);
}
int maxDiff(Node* root)
{
    int ans = INT_MIN;
    solve(root,ans);
    return ans;
    // Your code here 
}

//https://practice.geeksforgeeks.org/problems/print-a-binary-tree-in-vertical-order/1#
    void solve(Node* root,int cnt,int l,map<int,map<int,vector<int>>> &mp)
    {
        if(root==NULL)
            return;
        mp[cnt][l].push_back(root->data);
        solve(root->left,cnt-1,l+1,mp);
        solve(root->right,cnt+1,l+1,mp);
        
    }
    vector<int> verticalOrder(Node *root)
    {
        vector<int> ans;
        if(root==NULL)
            return ans;
        map<int,map<int,vector<int>>> mp;
        solve(root,0,0,mp);
        
        for(auto &value:mp)
        {
            for(auto &val:value.second)
            {
                for(auto &val2:val.second)
                {
                    ans.push_back(val2);
                }
            }
            
        }
        return ans;
        //Your code here
    }

//Serialise and deserialise a tree
    void construct(Node* root,vector<int> &ok)
    {
        if(root==NULL)  
        {
            ok.push_back(-1);
            return;
        }
        ok.push_back(root->data);
        construct(root->left,ok);
        construct(root->right,ok);
    }
    vector<int> serialize(Node *root) 
    {
        vector<int> ans;
        if(root==NULL)
            return ans;
        construct(root,ans);
        // for(auto &value:ans)
        //     cout<<value<<" ok";
        // cout<<endl;
        return ans;
        //Your code here
    }
    
    //Function to deserialize a list and construct the tree.
    Node* solve(vector<int> &A,int &idx)
    {
        if(idx>=A.size()||A[idx]==-1)
        {
            idx++;
            return NULL;
        }
        Node* root = new Node(A[idx++]);
      
        root->left=solve(A,idx);
       
        root->right=solve(A,idx);
        return root;
    }
    Node * deSerialize(vector<int> &A)
    {
        if(A[0]==-1)
            return NULL;
        int idx = 0;

        return solve(A,idx);
       //Your code here
    }

//Binary trees from linked list
void convert(Node *head, TreeNode *&root) {
    if(head==NULL)
    {
        root=NULL;
        return;
    }
    queue<TreeNode*> q;
    root = new TreeNode(head->data);
    q.push(root);
    head=head->next;
    while(head)
    {
        TreeNode* curr = q.front();
        q.pop();
        TreeNode* l = new TreeNode(head->data);
        q.push(l);
        head=head->next;
        curr->left=l;
        if(head)
        {
            TreeNode* r = new TreeNode(head->data);
            head=head->next;
            curr->right = r;
            q.push(r);
        }
        else
        {
            curr->right=NULL;
        }
        
    }
    return;
    // Your code here
}

//isSUbtree
https://practice.geeksforgeeks.org/problems/check-if-subtree/1#
     bool isIdentical(Node *r1, Node *r2)
    {
        if(r1==NULL&&r2==NULL)
            return true;
        if(r1==NULL&&r2!=NULL)
            return false;
        if(r1!=NULL&&r2==NULL)
            return false;
        if(r1->data!=r2->data)
            return false;
        return isIdentical(r1->left,r2->left)&&isIdentical(r1->right,r2->right);
        //Your Code here
    }
    bool isSubTree(Node* T, Node* S) 
    {
        if(T==NULL&&S==NULL)
            return true;
        else if(T==NULL&&S!=NULL)
            return false;
        else if(T!=NULL&&S==NULL)
            return true;
        if(isIdentical(T,S))return true;
        return isSubTree(T->left,S)||isSubTree(T->right,S);
        
        // Your code here
        
    }

//https://practice.geeksforgeeks.org/problems/extreme-nodes-in-alternate-order/1#
vector<vector<int>> levelOrder(Node *root)
{
    vector<vector<int>> vp;
    if (root == NULL)
        return vp;

    queue<Node *> q;
    q.push(root);
    while (!q.empty())
    {
        vector<int> t;
        int sz = q.size();
        for (int i = 0; i < sz; i++)
        {
            Node *temp = q.front();
            // cout<<temp->val<<" ";
            q.pop();
            if (temp->left != NULL)
            {
                q.push(temp->left);
            }
            if (temp->right != NULL)
            {
                q.push(temp->right);
            }
            t.push_back(temp->data);
        }
        // cout << endl;
        vp.push_back(t);
    }
    return vp;
}
    vector<int> ExtremeNodes(Node* root)
    {
        vector<int> ans;
        if(root==NULL)
            return ans;
        vector<vector<int>> ok = levelOrder(root);
        for(int i=0;i<ok.size();i++)
        {
            if(i&1)
            {
                ans.push_back(ok[i][0]);
            }
            else
            {
                ans.push_back(ok[i][ok[i].size()-1]);
            }
        }
        return ans;
        // Your code here
    }

//Number of Root to leaf paths
void solve(Node* root,int cnt,map<int,int> &mp)
{
    if(root==NULL)
        return;
    if(root->left==NULL&&root->right==NULL)
    {
        mp[cnt]++;
        return;
    }
    solve(root->left,cnt+1,mp);
    solve(root->right,cnt+1,mp);
}
void pathCounts(Node *root)
{
    if(root==NULL)
        return;
    map<int,int> mp;
    int cnt = 1;
    solve(root,cnt,mp);
    for(auto &value:mp)
    {
        cout<<value.first<<" "<<value.second<<" $";
    }
    
    //Your code here
}

//Find the Closest element in the BST
	void solve(Node* root,int &ans,int K)
	{
	    if(root==NULL)
	        return;
	    ans=min(ans,abs(root->data-K));
	    solve(root->left,ans,K);
	    solve(root->right,ans,K);
	}
    int minDiff(Node *root, int K)
    {
        int ans = INT_MAX;
        solve(root,ans,K);
        return ans;
        //Your code here
    }

//https://practice.geeksforgeeks.org/problems/print-nodes-having-k-leaves/1#
    void postOrder(Node *root,vector<Node*> &vp)
    {
        if(root==NULL)
        {
            return;
        }
        postOrder(root->left,vp);
        postOrder(root->right,vp);
        vp.push_back(root);
        
    }
    void count(Node* root,int &cnt)
    {
        if(root==NULL)
            return;
        if(root->left==NULL&&root->right==NULL)
        {
            cnt++;
            return;
        }
        count(root->left,cnt);
        count(root->right,cnt);
    }
    vector<int> btWithKleaves(Node *ptr, int k)
    { 
        vector<Node*> ok;
        postOrder(ptr,ok);
        vector<int> vp;
        for(auto &value:ok)
        {
            int cnt = 0;
            count(value->left,cnt);
            int cnt1 = 0;
            count(value->right,cnt1);
            if(cnt+cnt1==k)
            {
                vp.push_back(value->data);
            }
        }
        if(vp.size()==0)
        {
            return {-1};
        }
        return vp;
        //your code here.
    }

//Kth smallest element
https://practice.geeksforgeeks.org/problems/find-k-th-smallest-element-in-bst/1
 void inOrder(Node* root,vector<int> &vp)
{
    if(root==NULL)
        return;
    inOrder(root->left,vp);
    vp.push_back(root->data);
    inOrder(root->right,vp);
}
    // Return the Kth smallest element in the given BST
    int KthSmallestElement(Node *root, int K) {
    vector<int> vp;
    inOrder(root,vp);
    if(K-1<vp.size()&&K-1>=0)
    {
        return vp[K-1];
    }
    return -1;
        // add code here.
    }
//TC - O(N)
//SC - O(N)

//TC-O(N)
//Sc-O(1)
 void inOrder(Node* root,int &cnt,int &ans,int k)
{
    if(root==NULL)
        return;
    inOrder(root->left,cnt,ans,k);
    cnt++;
    if(cnt==k)
    {
        ans=root->data;
        return;
    }
    inOrder(root->right,cnt,ans,k);
}
    // Return the Kth smallest element in the given BST
    int KthSmallestElement(Node *root, int K) {
    int ans = -1;
    int cnt = 0;
    inOrder(root,cnt,ans,K);

    return ans;
        // add code here.
    }

//https://practice.geeksforgeeks.org/problems/leftmost-and-rightmost-nodes-of-binary-tree/1
vector<vector<int>> levelOrder(Node *root)
{
    vector<vector<int>> vp;
    if (root == NULL)
        return vp;

    queue<Node *> q;
    q.push(root);
    while (!q.empty())
    {
        vector<int> t;
        int sz = q.size();
        for (int i = 0; i < sz; i++)
        {
            Node *temp = q.front();
            // cout<<temp->val<<" ";
            q.pop();
            if (temp->left != NULL)
            {
                q.push(temp->left);
            }
            if (temp->right != NULL)
            {
                q.push(temp->right);
            }
            t.push_back(temp->data);
        }
        // cout << endl;
        vp.push_back(t);
    }
    return vp;
}
void printCorner(Node *root)
{
    if(root==NULL)
        return;
    vector<vector<int>> vp = levelOrder(root);
    for(auto &value:vp)
    {
        if(value.size()==1)
        {
            cout<<value[0]<<" ";
        }
        else
        {
            cout<<value[0]<<" "<<value[value.size()-1]<<" ";
        }
    }
    
// Your code goes here

}

//https://practice.geeksforgeeks.org/problems/construct-tree-1/1
    Node* solve(int in[],int s,int e,int pre[],int &idx)
    {
        if(s>e)
            return NULL;
        
        Node* node = new Node(pre[idx++]);
        if(s==e)
            return node;
        int i;
        for(i=s;i<=e;i++)//can be done using unordered_map
        {
            if(node->data==in[i])
            {
                break;
            }
        }
        node->left = solve(in,s,i-1,pre,idx);
        node->right = solve(in,i+1,e,pre,idx);
        return node;
    }
    Node* buildTree(int in[],int pre[], int n)
    {
        int idx = 0;
        return solve(in,0,n-1,pre,idx);
        // Code here
    }

//https://practice.geeksforgeeks.org/problems/mirror-of-a-given-node/1
    void solve(Node* r1,Node* r2,int k,int &ans)
    {
        if(r1==NULL||r2==NULL)
            return;
        if(r1->data==k)
        {
            if(r2)
            {
                ans=r2->data;
            }
            return;
        }
        else if(r2->data==k)
        {
            if(r1)
            {
                ans=r1->data;
            }
            return;
        }
        solve(r1->left,r2->right,k,ans);
        solve(r1->right,r2->left,k,ans);
    }
    int findMirror(Node *root, int target)
    {
        int ans = -1;
        solve(root,root,target,ans);
        return ans;
        //code here
    }

//https://practice.geeksforgeeks.org/problems/leaves-to-dll/1#
void solve(Node* root,Node* &head,Node* &temp)
{
    if(root==NULL)
        return;
    if(root->left==NULL&&root->right==NULL)
    {
        if(head==NULL)
        {
            head = new Node(root->data);
            temp=head;
        }
        else
        {
            
            temp->right = new Node(root->data);
            temp->right->left = temp;
            temp=temp->right;
        }
        return;
    }
    solve(root->left,head,temp);
    solve(root->right,head,temp);
}
void destroy(Node* &root)
{
    if(root==NULL)
        return;
    if(root->left==NULL&&root->right==NULL)
    {
        root=NULL;
        return;
    }
    destroy(root->left);
    destroy(root->right);
}
Node * convertToDLL(Node *root){
    Node* head = NULL;Node* temp = head;
    solve(root,head,temp);
    destroy(root);
    return head;
    // add code here.
}

//https://practice.geeksforgeeks.org/problems/node-at-distance/1#
int height(Node* root)
{
    if(root==NULL)
        return 0;
    return 1+max(height(root->left),height(root->right));
}
bool solve(Node* root,int k,multiset<int> &s)
{
    if(root==NULL)
        return false;
    if(root->left==NULL&&root->right==NULL&&k==0)
    {
        return true;
    }
    return solve(root->left,k-1,s) or solve(root->right,k-1,s);
}
void inorder(Node* root,multiset<int> &s,int k)
{
    if(root==NULL)
        return;
    inorder(root->left,s,k);
    if(solve(root,k,s))
        s.insert(root->data);
    inorder(root->right,s,k);
}
int printKDistantfromLeaf(Node* root, int k)
{
    if(root==NULL||height(root)==0)
        return 0;
    
    multiset<int> s;
    inorder(root,s,k);
    return s.size();
	//Add your code here. 
}

//https://practice.geeksforgeeks.org/problems/construct-tree-from-preorder-traversal/1
struct Node *constructTree(int n, int pre[], char preLN[])
{
    if(n==0)
        return NULL;
    Node* root = new Node(pre[0]);
    stack<Node*> st;
    st.push(root);
    for(int i=1;i<n;i++)
    {
        Node* ok = new Node(pre[i]);
        if(st.top()->left==NULL)
        {
            st.top()->left = ok;
        }
        else if(st.top()->right==NULL)
        {
            st.top()->right = ok;
        }
        else
        {
            st.pop();
            i--;
        }
        if(preLN[i]=='N')
            st.push(ok);
    }
    return root;
    // Code here
}